# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import example_pb2 as example__pb2


# ==== STUB FUNCTION ===
class SpeechRecognitionStub(object): 
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.tts = channel.unary_unary(
                '/example.SpeechRecognition/tts',
                request_serializer=example__pb2.TTSRequest.SerializeToString,
                response_deserializer=example__pb2.TTSResponse.FromString,
                )
        self.stt = channel.unary_unary(
                '/example.SpeechRecognition/stt',
                request_serializer=example__pb2.STTRequest.SerializeToString,
                response_deserializer=example__pb2.STTResponse.FromString,
                )


# === SERVICER FUNCTION ===
class SpeechRecognitionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def tts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


# === ADD FUNCTION ===
def add_SpeechRecognitionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'tts': grpc.unary_unary_rpc_method_handler(
                    servicer.tts,
                    request_deserializer=example__pb2.TTSRequest.FromString,
                    response_serializer=example__pb2.TTSResponse.SerializeToString,
            ),
            'stt': grpc.unary_unary_rpc_method_handler(
                    servicer.stt,
                    request_deserializer=example__pb2.STTRequest.FromString,
                    response_serializer=example__pb2.STTResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'example.SpeechRecognition', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SpeechRecognition(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def tts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/example.SpeechRecognition/tts',
            example__pb2.TTSRequest.SerializeToString,
            example__pb2.TTSResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/example.SpeechRecognition/stt',
            example__pb2.STTRequest.SerializeToString,
            example__pb2.STTResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)